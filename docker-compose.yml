# Observe Community MCP - Docker Compose Configuration
# 
# Simple unified configuration for development and production use.
# Environment variables control behavior without needing multiple files.

services:
  observe-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: observe-mcp-server
    ports:
      - "8000:8000"
      - "5678:5678"  # Debug port for development
    depends_on:
      - postgres
    environment:
      # === Core Configuration ===
      - OBSERVE_CUSTOMER_ID=${OBSERVE_CUSTOMER_ID}
      - OBSERVE_TOKEN=${OBSERVE_TOKEN}
      - OBSERVE_DOMAIN=${OBSERVE_DOMAIN:-observeinc.com}
      
      # === MCP Authentication ===
      - PUBLIC_KEY_PEM=${PUBLIC_KEY_PEM}
      
      # === Vector Search (Pinecone) ===
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_DOCS_INDEX=${PINECONE_DOCS_INDEX:-observe-docs}
      - PINECONE_RUNBOOKS_INDEX=${PINECONE_RUNBOOKS_INDEX:-observe-runbooks}
      
      # === Database (Dataset Intelligence) ===
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=opal_memory
      - POSTGRES_USER=opal
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
      # === Optional: Enhanced Embeddings ===
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # === Content Directories ===
      - OBSERVE_DOCS_DIR=/app/observe-docs
      - OBSERVE_RUNBOOKS_DIR=/app/runbooks
      
      # === Runtime ===
      - PYTHONUNBUFFERED=1
    volumes:
      # Documentation and runbooks (always read-only)
      - ./observe-docs:/app/observe-docs:ro
      - ./runbooks:/app/runbooks:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM); sock.settimeout(5); result = sock.connect_ex(('localhost', 8000)); sock.close(); exit(0 if result == 0 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL with pgvector extension
  # Required for semantic dataset intelligence (query_semantic_graph)
  postgres:
    image: pgvector/pgvector:pg15
    container_name: observe-opal-memory
    environment:
      POSTGRES_DB: opal_memory
      POSTGRES_USER: opal
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: >
      postgres
      -c log_statement=none
      -c log_duration=off
      -c log_line_prefix='%t [%p]: '
      -c log_min_duration_statement=100
      -c log_connections=on
      -c log_disconnections=on
      -c logging_collector=off
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U opal -d opal_memory"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: observe-mcp-network